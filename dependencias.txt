dependencias que não são necessárias quando a aplicação está rodando em produção

npm i -D typescript@~4.5.4 ts-node-dev@~1.1.8 sequelize-cli@~6.4.1 @types/express@~4.17.13 @types/node@~17.0.10

typescript@~4.5.4: linguagem utilizada
ts-node-dev@~1.1.8: monitora e atualiza projeto em desenvolvimento
sequelize-cli@~6.4.1: interface de linha de comando do sequelize(criar migrations, criar banco)
@types/express@~4.17.13: tipagens do express
@types/node@~17.0.10: tipagens do node

###############################################################################

dependencias utilizadas no projeto, bibliotecas, para ajudar no desenvolvimento do projeto

npm i express@~4.17.2 express-formidable@~1.2.0 adminjs@~5.5.1 @adminjs/express@~4.0.1 @adminjs/sequelize@~2.1.0 @adminjs/upload@~2.0.1 pg@~8.7.1 sequelize@~6.13.0

express@~4.17.2: cuida da parte de rotas
express-formidable@~1.2.0: dependência do adminjs pra trabalhar com formulários
adminjs@~5.5.1: repensável por criar o painel administrativo, realizar o crud
@adminjs/express@~4.0.1 @adminjs/sequelize@~2.1.0: necessário instalar o plugin/conector das bibliotecas/orm utilizadas no projeto
@adminjs/upload@~2.0.1: fazer upload dos videos, capa dos cursos
pg@~8.7.1: driver para se conectar com banco de dados postman

###############################################################################

- No entanto, se olharmos o usuário cadastrado no banco de dados veremos que sua senha está exposta, o que não é uma boa prática de segurança. Vamos cuidar para que ela seja encriptada antes de o usuário ser salvo no banco de dados. Para isso precisamos instalar a biblioteca “bcrypt”. Instale-a com o comando abaixo:
npm install bcrypt@~5.0.1

- Além disso, o bcrypt não possui tipagens, portanto precisamos instalar seus tipos separadamente através do @types:
npm install --save-dev @types/bcrypt@~5.0.0